Solution for CSCI235 assignment 3 task2
============================
Student number: 10258663
Name: Timothy Mah
============================

(1) List the customer"s name, address and the created shopping cart who purchased product P1003

db.shoppingCart.aggregate([ { $unwind: "$CUSTOMER.creates.SHOPPINGCART" }, { $match: { "CUSTOMER.creates.SHOPPINGCART.containsProdList.productId": "P1003" } }, { $project: { "Customer Name": "$CUSTOMER.customerName", "Customer Address": "$CUSTOMER.customerAddress", "Shopping Cart": "$CUSTOMER.creates.SHOPPINGCART" } } ]).pretty();

[
  {
    "Customer Name": "Andrew Smith",
    "Customer Address": {
      "street": "18 Bukit Timah",
      "building": "Rose",
      "postalCode": "589616",
      "country": "Singapore"
    },
    "Shopping Cart": {
      "cartId": "cart003",
      "dateCreated": {
        "$date": "2024-05-11T00:00:00Z"
      },
      "dateClosed": {
        "$date": "2024-05-11T00:00:00Z"
      },
      "containsProdList": [
        {
          "prodListId": 1,
          "productId": "P1002",
          "quantity": 2
        },
        {
          "prodListId": 2,
          "productId": "P1003",
          "quantity": 1
        }
      ]
    }
  }
]

(2) List the customer"s name, address, and the created shopping cart of the customer who created a shopping cart on 11 May 2024 (ISODate("2024-05-11T00:00:00Z")). Please do not show the customer id

db.shoppingCart.aggregate([ { $unwind: "$CUSTOMER.creates.SHOPPINGCART" }, { $match: { "CUSTOMER.creates.SHOPPINGCART.dateCreated": ISODate("2024-05-11T00:00:00Z") } }, { $project: { _id: 0, "Customer Name": "$CUSTOMER.customerName", "Customer Address": "$CUSTOMER.customerAddress", "Shopping Cart": "$CUSTOMER.creates.SHOPPINGCART" } } ]).pretty();

[
  {
    "Customer Name": "Andrew Smith",
    "Customer Address": {
      "street": "18 Bukit Timah",
      "building": "Rose",
      "postalCode": "589616",
      "country": "Singapore"
    },
    "Shopping Cart": {
      "cartId": "cart003",
      "dateCreated": {
        "$date": "2024-05-11T00:00:00Z"
      },
      "dateClosed": {
        "$date": "2024-05-11T00:00:00Z"
      },
      "containsProdList": [
        {
          "prodListId": 1,
          "productId": "P1002",
          "quantity": 2
        },
        {
          "prodListId": 2,
          "productId": "P1003",
          "quantity": 1
        }
      ]
    }
  }
]

(3) Find the total number of shopping carts created by each customer. For each customer, list his/her email address and the total number of shopping cart created

db.shoppingCart.aggregate([ { $match: { "CUSTOMER.creates.SHOPPINGCART": { $exists: true } } }, { $project: { "Customer Email" : "$CUSTOMER.customerEmail", _id: 0, "Total Shopping Carts" : { $size: "$CUSTOMER.creates.SHOPPINGCART" } } } ]).pretty();

[
  {
    "Customer Email": "C92378@gmail.com",
    "Total Shopping Carts": 2
  },
  {
    "Customer Email": "C78263@gmail.com",
    "Total Shopping Carts": 3
  }
]

(4) Find the products that have been included in at least 2 or 3 shopping carts

db.shoppingCart.aggregate([ { $match: { "PRODUCT.includedIn": { $exists: true } } }, { $project: { _id: 0, product: "$PRODUCT.productId", includedCount: { $size: "$PRODUCT.includedIn" } } }, { $match: { includedCount: { $gt: 2 } } }, { $project: { product: 1 } } ]).pretty();

[
  {
    "product": "P1001"
  },
  {
    "product": "P1002"
  }
]

(5) For each price base, list the price base and the total number of each price base

db.shoppingCart.aggregate([ { $match: { "PRODUCT.price.base": { $exists: true } } }, { $project: { "PRODUCT.price.base": 1, "PRODUCT.price.value": 1, "_id": 0 } }, { $group: { _id: "$PRODUCT.price.base", totalValue: { $sum: "$PRODUCT.price.value" } } } ]).pretty();

[
  {
    "_id": "Singapore",
    "totalValue": 450
  },
  {
    "_id": "US",
    "totalValue": 400
  },
  {
    "_id": "Australian",
    "totalValue": 800
  }
]

(6) Find the customers who have purchased both the products "P1002" and "P1003"

db.shoppingCart.aggregate([ { $match: { "CUSTOMER.creates.SHOPPINGCART.containsProdList.productId": { $in: ["P1002", "P1003"] } } } ]).pretty();

[
  {
    "_id": "C92378",
    "CUSTOMER": {
      "customerId": "C92378",
      "customerName": "Daniel Martin",
      "customerAddress": {
        "street": "718 Main Street",
        "building": "Idea Tower 1",
        "postalCode": "468419",
        "country": "Singapore"
      },
      "customerEmail": "C92378@gmail.com",
      "customerPhone": "92378888",
      "creates": {
        "SHOPPINGCART": [
          {
            "cartId": "cart001",
            "dateCreated": {
              "$date": "2024-05-19T00:00:00Z"
            },
            "dateClosed": null,
            "containsProdList": [
              {
                "prodListId": 1,
                "productId": "P1002",
                "quantity": 2
              },
              {
                "prodListId": 2,
                "productId": "P1001",
                "quantity": 1
              }
            ]
          },
          {
            "cartId": "cart002",
            "dateCreated": {
              "$date": "2024-05-12T00:00:00Z"
            },
            "dateClosed": {
              "$date": "2024-05-19T00:00:00Z"
            },
            "containsProdList": [
              {
                "prodListId": 1,
                "productId": "P1001",
                "quantity": 3
              }
            ]
          }
        ]
      }
    }
  },
  {
    "_id": "C78263",
    "CUSTOMER": {
      "customerId": "C78263",
      "customerName": "Andrew Smith",
      "customerAddress": {
        "street": "18 Bukit Timah",
        "building": "Rose",
        "postalCode": "589616",
        "country": "Singapore"
      },
      "customerEmail": "C78263@gmail.com",
      "creates": {
        "SHOPPINGCART": [
          {
            "cartId": "cart003",
            "dateCreated": {
              "$date": "2024-05-11T00:00:00Z"
            },
            "dateClosed": {
              "$date": "2024-05-11T00:00:00Z"
            },
            "containsProdList": [
              {
                "prodListId": 1,
                "productId": "P1002",
                "quantity": 2
              },
              {
                "prodListId": 2,
                "productId": "P1003",
                "quantity": 1
              }
            ]
          },
          {
            "cartId": "cart004",
            "dateCreated": {
              "$date": "2024-05-14T00:00:00Z"
            },
            "dateClosed": null,
            "containsProdList": [
              {
                "prodListId": 1,
                "productId": "P1001",
                "quantity": 3
              }
            ]
          },
          {
            "cartId": "cart005",
            "dateCreated": {
              "$date": "2024-05-15T00:00:00Z"
            },
            "dateClosed": null,
            "containsProdList": [
              {
                "prodListId": 1,
                "productId": "P1002",
                "quantity": 1
              }
            ]
          }
        ]
      }
    }
  }
]

(7) Find the products that have not been included in any of the shopping carts

db.shoppingCart.aggregate([ { $match: { "PRODUCT.includedIn": { $exists: true, $in: [null] } } } ]).pretty();

[
  {
    "_id": "P1004",
    "PRODUCT": {
      "productId": "P1004",
      "productName": "Huion Tablet",
      "price": {
        "unit": "Dollar",
        "base": "Singapore",
        "value": 360
      },
      "includedIn": [
        null
      ]
    }
  }
]

(8) Find the total number of customers who do not provide his/her telephone number

db.shoppingCart.aggregate([ { $match: { "CUSTOMER": { $exists: true }, "CUSTOMER.customerPhone": { $exists: false } } }, { $count: "customer_no_phone" } ]).pretty();

[
  {
    "customer_no_phone": 1
  }
]

(9) Update the closing date (dateClosed) of the cart "cart001" of the customer "C92378" to 15 May 2024

db.shoppingCart.updateOne( { "_id": "C92378", "CUSTOMER.creates.SHOPPINGCART.cartId": "cart001" }, { $set: { "CUSTOMER.creates.SHOPPINGCART.$.dateClosed": new Date("2024-05-15") } } );

{
  "acknowledged": true,
  "insertedId": null,
  "matchedCount": 1,
  "modifiedCount": 1,
  "upsertedCount": 0
}

(10) Delete from the collection a shoppingcart (cart005) created by the customer C78263

db.shoppingCart.updateOne( { "_id": "C78263" }, { $pull: { "CUSTOMER.creates.SHOPPINGCART": { "cartId": "cart005" } } } );

{
  "acknowledged": true,
  "insertedId": null,
  "matchedCount": 1,
  "modifiedCount": 1,
  "upsertedCount": 0
}

END